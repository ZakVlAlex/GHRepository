@{
    // Задание страницы макета и заголовка страницы
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Зарегистрировать учетную запись";

    // Инициализировать общие переменные страницы
    var email = "";
    var password = "";
    var confirmPassword = "";

    // Проверка
    var isValid = true;
    var emailErrorMessage = "";
    var passwordErrorMessage = "";
    var confirmPasswordMessage = "";
    var accountCreationErrorMessage = "";
    // var captchaMessage = "";

    // Если получен запрос POST, выполняется проверка и обработка данных
    if (IsPost) {
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];

        // Проверка символов, вводимых пользователем в ответ на запрос CAPTCHA
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     captchaMessage = "Неправильный ответ CAPTCHA";
        //     isValid = false;
        // }

        // Проверка адреса электронной почты пользователя
        if (email.IsEmpty()) {
            emailErrorMessage = "Необходимо указать адрес электронной почты.";
            isValid = false;
        }

        // Проверка пароля и его подтверждения
        if (password.IsEmpty()) {
            passwordErrorMessage = "Пароль не может быть пустым.";
            isValid = false;
        }

        if (password != confirmPassword) {
            confirmPasswordMessage = "Новый пароль и его подтверждение не совпадают.";
            isValid = false;
        }

        // Если все сведения указаны правильно, создается учетная запись
        if (isValid) { 
            // Добавление нового пользователя в базу данных
            var db = Database.Open("StarterSite");

            // Проверка наличия пользователя в базе данных
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // Добавление адреса электронной почты в таблицу профиля
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);

                // Создание новой записи в базе данных членства.
                // Если проверка пройдена, обработка запроса продолжается
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,	
                            subject: "Подтвердите учетную запись", 
                            body: "Код подтверждения: " + token + ". Чтобы активировать свою учетную запись, перейдите по адресу: <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a>."
                        ); 
                    }

                    if (requireEmailConfirmation) {
                        // Выражение благодарности за регистрацию и напоминание о письме, отправленном по указанному адресу
                        Response.Redirect("~/Account/Thanks");
                    } else {
                        // Переход на домашнюю страницу и выход
                        WebSecurity.Login(email, password);
                        Response.Redirect("~/");
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    isValid = false;
                    accountCreationErrorMessage = e.ToString();
                }
            } else {
                // Пользователь уже существует
                isValid = false;
                accountCreationErrorMessage = "Указанный адрес электронной почты уже используется другим пользователем.";
            }
        }    
    }
}

<p>
   Используйте форму ниже для создания учетной записи. 
</p>

@* Уведомлять пользователя при наличии хотя бы одной ошибки проверки *@
@if (!isValid) {
   <p class="message error">
    @if (accountCreationErrorMessage.IsEmpty()) {
        @:Исправьте ошибки и повторите попытку.
    } else {
        @accountCreationErrorMessage
    }
   </p>
}

<form method="post" action="">
    <fieldset>
        <legend>Форма регистрации</legend>
        <ol>
            <li class="email">
                <label for="email">Адрес электронной почты:</label>
                <input type="text" id="email" name="email" title="Адрес электронной почты" value="@email" @if(!emailErrorMessage.IsEmpty()){<text>class="error-field"</text>} />
                @* Записать все ошибки проверки адреса электронной почты на странице *@
                @if (!emailErrorMessage.IsEmpty()) {
                    <label for="email" class="validation-error">@emailErrorMessage</label>
                }
            </li>
            <li class="password">
                <label for="password">Пароль:</label>
                <input type="password" id="password" name="password" title="Пароль" @if(!passwordErrorMessage.IsEmpty()){<text>class="error-field"</text>} />
                @* Записать все ошибки проверки пароля на странице *@
                @if (!passwordErrorMessage.IsEmpty()) {
                    <label for="password" class="validation-error">@passwordErrorMessage</label>
                }
            </li>
            <li class="confirm-password">
                <label for="confirmPassword">Подтверждение пароля:</label>
                <input type="password" id="confirmPassword" name="confirmPassword" title="Подтверждение пароля" @if(!confirmPasswordMessage.IsEmpty()){<text>class="error-field"</text>} />
                @* Записать все ошибки проверки пароля на странице *@
                @if (!confirmPasswordMessage.IsEmpty()) {
                    <label for="confirmPassword" class="validation-error">@confirmPasswordMessage</label>
                }
            </li>
            <li class="recaptcha">
                <div class="message info">
                    <p>Чтобы включить проверку CAPTCHA, <a href="http://go.microsoft.com/fwlink/?LinkId=204140">установите вспомогательную библиотеку ASP.NET</a>, раскомментируйте ReCaptcha.GetHtml и замените PUBLIC_KEY
                    на свой открытый ключ.  В верхней части страницы раскомментируйте ReCaptcha.Validate и
                    замените PRIVATE_KEY на свой открытый ключ, а также раскомментируйте переменную captchaMessage.</p>
                    <p>Чтобы получить ключи reCAPTCHA, зарегистрируйтесь на веб-сайте <a href="http://recaptcha.net">reCAPTCHA.net</a>.</p>
                </div>
                @*@ReCaptcha.GetHtml("PUBLIC_KEY", theme: "white")
                @if (!captchaMessage.IsEmpty()) {
                    <label class="validation-error">@captchaMessage</label>
                }*@
            </li>
        </ol>
        <p class="form-actions">
            <input type="submit" value="Зарегистрироваться" title="Зарегистрироваться" />
        </p>
    </fieldset>
</form>

